// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract TokenBurnTracker is ERC20, Ownable {
    address public burnAddress = address(0x000000000000000000000000000000000000dEaD);

    // Events
    event TokensBurned(address indexed burner, uint256 amount);

    constructor(string memory name, string memory symbol) ERC20(name, symbol) {}

    // Function to burn tokens
    function burn(uint256 amount) external {
        _burn(msg.sender, amount);
        emit TokensBurned(msg.sender, amount);
    }

    // Function to burn tokens from a specific account
    function burnFrom(address account, uint256 amount) external onlyOwner {
        _burn(account, amount);
        emit TokensBurned(account, amount);
    }

    // Override transfer function to burn tokens on transfer to burn address
    function _transfer(address sender, address recipient, uint256 amount) internal override {
        if (recipient == burnAddress) {
            _burn(sender, amount);
            emit TokensBurned(sender, amount);
        } else {
            super._transfer(sender, recipient, amount);
        }
    }

    // Function to change the burn address (onlyOwner)
    function setBurnAddress(address _burnAddress) external onlyOwner {
        burnAddress = _burnAddress;
    }
}
